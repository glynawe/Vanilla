// A possible "curly-bracket language" syntax for Vanilla: 

interface ADT 
{
    type repr;
    type t = ref repr;
}

interface COMPARABLE
{
    include ADT;
    fn equal (a: t, b: t) : bool;
}

interface STRING
{
    include COMPARABLE;
    fn create (text: []byte): t;
}

module String : STRING 
{
    fn equal (a: t, b: t) : bool {
        return a == b || len(a) == len(b) && a^ == b^;
    }

    fn create (text: array of byte): t {
        var s = new(byte, len(text)); 
        s^ = text; 
        return s;
    }
}

interface SET 
{
    include ADT;
    type element_t;

    val empty: t;

    fn add (set: t, element: element_t) : t;
    fn includes (set: t, element: element_t) : bool;
}

module Set <Element: COMPARABLE> : SET where  element_t = Element::t
{
    type repr = struct { 
        head: element_t; 
        tail: t; 
    }

    val empty: t = nil;

    fn add (set: t, element: element_t) : t {
        var list = new(t); 
        list.head = head; 
        list.tail = tail;
        return list;
    }

    fn includes (set: t, element: element_t) : bool {
        while (set != nil) 
            if (set.head.equal(element))  
                return true; 
            else 
                set = set.tail; 
        return false;
    }
}

module Program 
{
    import Print;  

    import String;
    import StringSet = Set<String>;

    fn main () {
        val s = String::create("Hello World!");
        var set = StringSet::empty;
        set = set.add(set, s);
        if (set.includes(s))
            Print::print_string("Success!");
    } 
}
