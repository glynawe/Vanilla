interface stdio {
    // I/O functions from the C standard library.
    const EOF = -1;
    fn putchar (c : int): int;
    fn getchar () : int;
}

interface IO {
    fn GetString (var s: []byte);
    fn PutChar (c: byte);
    fn PutString (s: []byte);
    fn PutInteger (number, base, width: int);
}

module IO {
    import Character;
    import stdio;

    fn GetString (var s: []byte) {
        // Read a line, copying as many of the leading characters as possible into 's'.
        var c = stdio::getchar();
        var i = 0;
        while (i < len(s) && c != Character::LF && c != stdio::EOF) {
            s[i] = as(byte, c);
            c = stdio::getchar();
            i++;
        }
        if (i < len(s))
            s[i] = 0X;    // add terminator
        else
            while (c != Character::LF && c != stdio::EOF)  // Consume remainder of line.
                c = stdio::getchar();
    }

    fn PutChar (c: byte) {
        let result = stdio::putchar(c);
        expect(result == stdio::EOF);  // It's weird if putchar fails!
    }

    fn PutString (s: []byte) {
        for (i = 0 : len(s)) 
            if (s[i] != 0) 
                break;
            else 
                PutChar(s[i]);
        PutChar(Character::LF);
    }

    fn PutInteger (number, base, width: int) {
        // Print int 'number' in 'base', left padded to 'width'.
        // XXX cannot print the minimum negative int.
        var buffer: [lenint + 1] byte;
        if (number == 0)
            PutChar('0');
        else {
            var i = 0;
            var n = abs(number);
            while (n > 0) {
                var digit = as(byte, n % base);
                buffer[i] = digit + (digit < 10 ? '0' : 'A');
                n /= base;
                i++;
            }
            if (number < 0) {
                buffer[i] = '-';
                i++;
            }
            var j = width;
            while (j >= i) {
                PutChar(' ');
                j--;
            }
            while (j >= 0) {
                PutChar(buffer[j]);
                j--;
            }
        }
    }
}
