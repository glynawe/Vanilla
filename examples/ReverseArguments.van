interface ADT =
    type t;
end.

interface COMPARABLE =
    include ADT;
    procedure equal (a, b: t) : boolean;
end.

interface PRINTABLE =
    include ADT;
    procedure print (a: t);
end.

interface STRING =
    include COMPARABLE;
    include PRINTABLE;
    type t;
    procedure make (text: array of byte): t;
end.

module String: STRING =
    type t = ref array of byte;
    
    procedure make (text: array of byte): t =
        var s := new(byte, len(text));
        s^ := text;
        return s;
    end;
    
    procedure equal (a, b: t) : boolean =
        return a = b or len(a) = len(b) and a^ = b^;
    end;
    
    import System;

    procedure print (a: t) =
        for i := 0 until len(a) while a[i] != '\0' do
            System_putchar(a[i])
        end
    end;
end.

interface LIST =
    include COMPARABLE;
    type t;
    type element;
    val empty: t;
    procedure make () : t;
    procedure prepend (head: element; tail: t) : t;
    procedure takeHead (var list: t; var head: element) : boolean;
end.

module List (Element: COMPARABLE): LIST where element := Element_t =
    type element;
    type t = ref record value: element; next: t end;

    val empty: t := nil;
    
    procedure equal (a, b: list) : boolean =
        while a != nil and b != nil and Element_equal(a.head, b.head) do
            a := a.tail;
            b := b.tail;
        end;
        return a = b
    end;
    
    procedure prepend (head: element; tail: t) : t =
        var list := new(t);
        list.head := head; 
        list.tail := tail;
        return list
    end;
    
    procedure takeHead (var list: t; var head: element) : boolean =
        if list = nil then 
            return false
        else
            head := list.head;
            list := list.tail;
            return true
        end
    end;
end.

module ReverseArguments =
    import System;
    import String;
    import StringList := List(String);
    
    procedure main() =
        var list := StringList_empty;
        for i := 1 until System_argc do
            list := StringList_prepend(list, String_make(System_argv[i]))
        end;
        StringList_reverse();
        var head: String;
        while StringList_takeHead(list, head) do
            String_print(head)
        end
    end;
end.
