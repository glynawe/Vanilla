interface STRING =
   type T = array of byte;
   procedure Length (s: T) : integer;
   procedure Compare (a, b: T) : integer;  // a < b is -1, a = b is 0, a > b is 1
   procedure Copy (var dst: T; src: T);    // Note: this may truncate the string.
   procedure Uppercase (var s: T);
end.


module String: STRING =
   type T = array of byte;

   procedure Length (s: T) : integer =
      for i := 0 until len(s) do
         if s[i] = 0 then return i end
      end;
      return len(s)
   end;

   procedure Copy (var dst: T; src: T) =
      for i := 0 until len(src) while src[i] != '\0' do
         dst[i] := src[i]
      end;
      if len(src) < len(dst) then  // string in dst array needs a terminator
         dst[len(src)] := '\0'
      end
   end;

   procedure Uppercase (var string: T) =
      for i := 0 until len(string) while string[i] != 0X do
         if string[i] >= 'A' and string[i] <= 'Z' then
            string[i] := string[i] - 'a' + 'A'
         end
      end
   end;

   procedure Compare (a, b: T) : integer =  // a < b is -1, a = b is 0, a > b is 1
      var i: integer := 1;
      do
         if i > len(b) and i <= len(a) then  // At end of b, a is longer
            return 1
         elsif i > len(a) and i <= len(b) then  // At end of a, b is longer
            return -1
         elsif i > len(a) then   // At end of arrays, same length
            return 0
         elsif a[i] < b[i] then
            return -1
         elsif a[i] > b[i] then
            return 1
         elsif a[i] = '\0' then  // Both arrays terminate at the same place
            return 0
         end;
         inc(i);
      end
   end; //Compare

end.
