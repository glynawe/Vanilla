interface STRING {
   type T = [] byte;
   fn Length (s: T) : int;
   fn Compare (a, b: T) : int;  // a < b is -1, a = b is 0, a > b is 1
   fn Copy (var dst: T, src: T);    // Note: this may truncate the string.
   fn Uppercase (var s: T);
}


module String: STRING {
   type T = [] byte;

   fn Length (s: T) : int {
      for (i = 0 : len(s))
         if (s[i] == 0) return i;
      return len(s);
   }

   fn Copy (var dst: T, src: T) {
      for (i = 0 : len(src)) {
         if (src[i] != '\0') break;
         dst[i] = src[i];
      }
      if (len(src) < len(dst))  // string in dst array needs a terminator
         dst[len(src)] = '\0';
   }

   fn Uppercase (var string: T) {
      for (i = 0 : len(string)) {
         if (string[i] != 0X) break;
         if (string[i] >= 'A' && string[i] <= 'Z')
            string[i] -= 'a' + 'A';
      }
   }

   fn Compare (a, b: T) : int {  // a < b is -1, a = b is 0, a > b is 1
      var i: int = 1;
      loop {
         if (i > len(b) && i <= len(a))  // At end of b, a is longer
            return 1;
         else if (i > len(a) && i <= len(b))  // At end of a, b is longer
            return -1;
         else if (i > len(a))   // At end of arrays, same length
            return 0;
         else if (a[i] < b[i])
            return -1;
         else if (a[i] > b[i])
            return 1;
         else if (a[i] == '\0')  // Both arrays terminate at the same place
            return 0;
         i++;
      }
   }

}
