#
# VanillaC grammar in Lark. 
#

program: (module | interface | functor)*

module    : "module" NAME [publicinterface] "{" declaration* "}"
functor   : "module" NAME moduleparameters [publicinterface] [typeconstraints] "{" declaration* "}"
interface : "interface" NAME "{" definition* "}"

moduleparameters : "<" moduleparameter ("," moduleparameter)* ">"
typeconstraints : "with" typeconstraint ("," typeconstraint)*
moduleparameter : NAME ":" NAME
typeconstraint : globalname "=" globalname
publicinterface : ":" NAME

?definition : vardefinition | procdefinition | otherdefinitions
?declaration: vardeclaration | procdeclaration | otherdefinitions
?otherdefinitions : inclusion | constdefinition | typedefinition

inclusion : "import" NAME ["=" expansion] ";" | "include" expansion ";"
expansion : NAME ["<" NAME ("," NAME)* ">"] [":" NAME] [typeconstraints] 

parameterizedmodule : NAME "<" NAME ("," NAME)* ">"

importedname : NAME "::" NAME
globalname : NAME | NAME "::" NAME

constdefinition : "const" NAME "=" constant ";"
constant: expression

vardefinition : ("var" | "let") varlist ";"
vardeclaration : ("var" | "let") varlist ["=" structuredconstant] ";"
varlist:  namelist ":" type
namelist: NAME ("," NAME)*
?structuredconstant : constant | structure
structure: "{" structureitems ("," structureitems)* "}"
structureitems: structuredconstant ["for" constant]

procdefinition: "fn" NAME proctype ";"
procdeclaration: ["loop"] "fn" NAME proctype block
proctype:        "(" parameterlist ")" [":" type]
parameterlist:   (parameters ("," parameters)*)?
parameters: varlist       -> constparameters
        | "var" varlist   -> varparameters

typedefinition : "type" NAME ("=" type)? ";"
type : globalname                         -> namedtype
        | "[" constant "]" type           -> arraytype
        | "[" "]" type                    -> openarraytype
        | "struct" "{" (varlist ";")* "}" -> recordtype
        | "ref" type                      -> referencetype
        | "byte"                          -> bytetype
        | "inte"                          -> integertype
        | "word"                          -> wordtype
        | "float"                         -> realtype
        | "bool"                          -> booleantype
        | "fn" proctype                   -> fntype

statement: localvar | locallet | constdefinition | block
         | assignment | call | if | loop | break | return | switch | empty

block: "{" statement* "}"

localvar : "var" namelist ([":" type ["=" expression]] | "=" expression) ";"
locallet : "let" namelist [":" type] "=" expression ";"

if:        "if" "(" expression ")" statement ["else" statement]

loop     : label? (for | while | forever)
for      : "for" "(" NAME "=" expression (loopto | loopuntil) expression ")" statement
while    : "while" "(" expression ")" statement
forever  : "loop" statement
break    : "break" [NAME] ";"
loopto: ".." 
loopuntil: ":"
label    : NAME ":"

switch :    "switch" "(" expression ")" "{" case* [default] "}"
case:       "case" range ("," range)* ":" block
range:      constant (".." constant)?
default:    "default" ":" statements
statements: statement+

call: designator "(" (expression ("," expression)*)? ")" ";"

assignment : designator "=" expression ";"
        | designator mathop "=" expression ";"
        | designator "++" ";"
        | designator "--" ";"
mathop : "+" | "-" | "*" | "/" | "%"

return: "return" [expression] ";"

empty:

?expression: disjunction
        | disjunction "?" disjunction ":" expression

?disjunction: conjunction
        | conjunction "||" disjunction -> logicalor

?conjunction: relation
        | relation "&&" conjunction -> logicaland

?relation: sum
        | sum "==" sum  -> eq
        | sum "!=" sum -> ne
        | sum "<" sum  -> lt
        | sum "<=" sum -> le
        | sum ">" sum  -> gt
        | sum ">=" sum -> ge

?sum:   term
        | term "+" sum  -> plus
        | term "-" sum  -> minus

?term:  factor
        | factor "*" term   -> times
        | factor "/" term   -> divide
        | factor "%" term -> mod

?factor: "+" factor
        | "-" factor   -> negate
        | "!" factor -> not
        | "new" "(" type ["," constant] ")"
        | "TYPESIZE" "(" type ")" 
        | "TYPE" "(" expression "," type ")" 
        | designator
        | designator "(" (expression ("," expression)*)? ")" -> call
        | "(" expression ")"
        | INTEGER
        | REAL
        | CHARACTER
        | STRING
        | TRUE
        | FALSE
        | NIL

?designator: globalname
        | designator "." NAME           -> selection
        | designator "^"                -> dereference
        | designator "[" expression "]" -> subscript

COMMENT: "//" /[^\n]*/
WHITESPACE: /[ \t\n\r]+/
%ignore COMMENT
%ignore WHITESPACE

NIL: "nil"
TRUE: "true"
FALSE: "false"
NAME: /[A-Za-z_][A-Za-z0-9_]*/

INTEGER:   /[0-9]+[XL]?/ | /0x[0-9A-Fa-f]+[XL]?/ | /0o[0-7]+[XL]?/ | /0b[01]+[XL]?/
REAL:      /[0-9]+[.][0-9]+([Ee][+-]?[0-9]+)?/
STRING:    "\"" (NORMAL | "'"  | "\\\"" | ESCAPE)* "\""
CHARACTER: "'"  (NORMAL | "\"" | "\\'"  | ESCAPE) "'"
ESCAPE:    "\\\\" | "\\n" | "\\f" | "\\t" | "\\b" | "\\a" | "\\e" | "\\v" | "\0" | "\\x" /[0-9A-Fa-f][0-9A-Fa-f]/
NORMAL:    " " | "!" | "#".."&" | "(".."[" | "]".."~"
